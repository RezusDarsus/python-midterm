""" I2P Midterm Exam

* Solutions should be written in the appropriate functions.
* Helper functions can be defined if needed.


"""

from itertools import *
from functools import *

""" Task #1 (4 points)

1)What is the scope of a variable defined inside a function in Python?
A) Local scope 
B) Global scope 
C) Enclosing scope 
D) Built-in scope

2)Which of the following operations can modify a list in Python?
A) Concatenation 
B) Slicing
C) Append 
D) Iteration

3)In Python, are dictionaries ordered or unordered collections?
A) Ordered_mutable
B) Unordered_mutable
C) Ordered_immutable
D) Unordered_immutable

4)Can a tuple in Python be modified after it is created?
A) Yes, using the append() method
B) Yes, using the insert() method
C) No, tuples are immutable
D) Yes, by directly assigning values to its elements

"""

""" Task #2 (2 points)
Write a function `numAverage` which takes arbitrary number of arguments(*args) and returns their average.
Ex.:
1 2 2 5 8 3-> 3.5
2.5 3.2 9.1 -> 4.933333333333334
2 0.5 0.5  9 -> 3
"""

""" Task #3 (3 points)"""
Write a function `oddCheck` which takes the list of numbers and checks if
all odd numbers from that list are greater than 15.

You should solve the problem using HOFs: takewhile, dropwhile, zip, filter,
map, reduce, enumerate, any, all, sum, len.

YOU WILL GET 3 POINTS IF YOU SOLVE PROBLEM USING ONLY GIVEN HOFs. OTHERWISE
YOU WILL GET AT MOST 1 POINTS.

Ex.:
[2,17,12,21,101] -> True
[103] -> True
[15] -> False (15 is not greater than 15)
[20] -> True (There are no odd numbers)
[1, 2, 4, 21] -> False (1 is not greater than 15)
"""


""" Task #4 (2 points)
Write a function `almostMax` which takes a list of numbers as an argument
and finds the second maximum in the list. The second maximum is a number
which is equal or greater than every number except the maximum.

For example, if the list is [1,2,3,4,5], maximum is 5 and the second maximum
is 4.

IF YOU USE `sorted` or `sort` FUNCTION YOU WILL GET ONLY 1 OUT OF 2 POINTS.

Ex.:
[1,2,3,4,5] -> 4
[2,-1,4] -> 2
[-3,4,2,4,1] -> 4
[1,5,2,1,3,3] -> 3
"""

""" Task #5 (4 points)
Write a function `leapYearCount` which takes one argument `start_year` and
counts how many leap years have occured since `start_year` until 2024.
(Both endpoints are included).

Year is a leap year if it is divisible by 400 or if it is divisble by 4, but
not by 100.

For example: 2016 is a leap year as it is divisble by 4, but not by 100. 2021
is not a leap year as it is not divisble by 4. 1900 is not also a leap year
as it is divisible by 100 and by 4, but it is not divisible by 400. 2000 is a
leap year as it is divisible by 400.

Your function should return one number, how many leap years have occured
since the given start year. You should NOT return list of leap years.

Ex.:
2024 -> 1 (2024 is a leap year)
2015 -> 3 (only 2016, 2020 and 2024 are leap years)
1899 -> 31
1121 -> 220
"""

